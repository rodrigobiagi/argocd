trigger:

  branches:
    include:
    - refs/heads/poc-master
    
    exclude:
    - refs/heads/feature/*
    - refs/heads/develop
    - refs/heads/release
    - refs/heads/fix-release

  paths:
    include:
    - app

variables:
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/poc-master') }}:
    imageName: '$(Build.BuildId)'
    image: 'tbkacrhml001.azurecr.io/backoffice-admin-api'
    SourceBranchName: 'poc-master'

pool:
  vmImage: ubuntu-latest
# Build App ============================================================================
stages:
- stage: 'CI'
  displayName: 'App Build'
  condition:  ne(variables['Build.Reason'], 'PullRequest')
  jobs:
  - job: "App_build" 
    displayName: 'App Build'
    steps:    
    - task: DotNetCoreCLI@2
      displayName: 'dotnet clean'
      inputs:
        command: custom
        projects: '**/*.sln'
        custom: clean
        workingDirectory: $(Build.SourcesDirectory)/app/

    - task: DotNetCoreCLI@2
      displayName: 'dotnet restore'
      inputs:
        command: restore
        projects: '**/*.sln'
        restoreArguments: '--interactive  '
        feedsToUse: config
        nugetConfigPath: $(Build.SourcesDirectory)/app/nuget.config
        workingDirectory: $(Build.SourcesDirectory)/app/

    - task: DotNetCoreCLI@2
      displayName: 'dotnet build'
      inputs:
        projects: '**/*.sln'
        arguments: '--configuration Release'
        workingDirectory: $(Build.SourcesDirectory)/app/

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        arguments: '--configuration Release --no-restore /property:PublishWithAspNetCoreTargetManifest=false'
        zipAfterPublish: false
        modifyOutputPath: false
        workingDirectory: $(Build.SourcesDirectory)/app/

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: ls -R $(Build.SourcesDirectory)

    - task: PublishBuildArtifacts@1
      displayName: 'Publish files'
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/infra/'
        artifactName: kubernetes-files

    - task: PublishBuildArtifacts@1
      displayName: 'Publish files'
      continueOnError: true
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)/app/src/Backoffice.Admin.API/bin/Release/net5.0/publish'
        artifactName: artifact-to-container

#=====================================================================================================
- stage: 'DockerBuildPoc'
  displayName: 'Poc: Docker Build'
  condition: and(succeeded(), eq (variables['Build.SourceBranch'], 'refs/heads/poc-master'))
  dependsOn: CI
  jobs:
  - job: "Docker_build" 
    displayName: 'Docker Build'
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: | 
          mkdir $(Pipeline.Workspace)/dockerapp
          cp $(Pipeline.Workspace)/s/app/src/Backoffice.Admin.API/Dockerfile $(Pipeline.Workspace)/dockerapp
      
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'current'
        artifactName: 'artifact-to-container'
        targetPath: '$(Pipeline.Workspace)/dockerapp'
    
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: rm -rf $(Pipeline.Workspace)/dockerapp/App_Data/dataSettings.json

    - task: Docker@2
      displayName: 'Docker Login'
      inputs:
        containerRegistry: 'tbkacrhml001'
        command: 'login'

    - task: Bash@3
      displayName: 'Docker Build e Push'
      inputs:
        targetType: 'inline'
        script: |
          docker build -t $(image):$(imageName) .
          docker image push $(image):$(imageName)
        workingDirectory: '$(Pipeline.Workspace)/dockerapp'
#=====================================================================================================
- stage: 'Poc_Deploys'
  displayName: 'Poc: Deploy AKS'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/poc-master'))
  dependsOn: 'DockerBuildPoc'
  jobs:
  - deployment: 'deploy_release'
    displayName: 'Create Deployment Azure Kubernetes Service'
    variables: 
    - group: 'backoffice-admin-api-poc' 
    - group: DbCredential
    - group: cert
    - group: resources-hml
    environment: backoffice-admin-api-hml
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'current'
              artifactName: 'kubernetes-files'
              targetPath: '$(Pipeline.Workspace)'
          
          - task: replacetokens@3
            displayName: "Substituir variaveis deployment e namespace"
            inputs:
              rootDirectory: '$(Agent.BuildDirectory)'
              targetFiles: '*.*'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: true
          
          - task: replacetokens@3
            displayName: "Substituir variaveis configmap"
            inputs:
              rootDirectory: '$(Agent.BuildDirectory)/configmap'
              targetFiles: '*.*'
              encoding: 'auto'
              writeBOM: true
              actionOnMissing: 'warn'
              keepToken: false
              tokenPrefix: '#{'
              tokenSuffix: '}#'
              useLegacyPattern: false
              enableTransforms: false
              enableTelemetry: true
          
          - task: Kubernetes@1
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'tbk-aks-hml-250'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(Agent.BuildDirectory)/namespace.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'

          - task: Kubernetes@1
            displayName: 'create configmap'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'tbk-aks-hml-250'
              namespace: '$(namespace)'
              command: 
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
              configMapName: 'backoffice-admin-api-appsettings'
              forceUpdateConfigMap: true
              useConfigMapFile: true
              configMapFile: '$(Agent.BuildDirectory)/configmap/appsettings.json'

          - task: Kubernetes@1
            displayName: 'apply deployment'
            inputs:
              connectionType: 'Kubernetes Service Connection'
              kubernetesServiceEndpoint: 'tbk-aks-hml-250'
              command: 'apply'
              useConfigurationFile: true
              configuration: '$(Agent.BuildDirectory)/deployment.yaml'
              secretType: 'dockerRegistry'
              containerRegistryType: 'Azure Container Registry'
